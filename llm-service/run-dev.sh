#!/bin/bash

# Script kh·ªüi ƒë·ªông m√¥i tr∆∞·ªùng development cho AI Service
# T∆∞∆°ng t·ª± nh∆∞ backend service

set -e  # Exit on error

COMPOSE_FILES="-f docker-compose.yml -f docker-compose.dev.yml"
SERVICE_NAME="ai-service"
BACKEND_NETWORK="backend_default"

echo "ü§ñ AI Teaching Assistant Service - Development Mode"
echo "=================================================="

# Ki·ªÉm tra Docker v√† Docker Compose
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i Docker tr∆∞·ªõc."
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i Docker Compose tr∆∞·ªõc."
    exit 1
fi

# Ki·ªÉm tra service ƒëang ch·∫°y hay kh√¥ng
if docker ps --format '{{.Names}}' | grep -q "^ai_service$"; then
    echo "üõë Container 'ai_service' ƒëang ch·∫°y. ƒêang d·ª´ng..."
    docker-compose $COMPOSE_FILES down
    exit 0
fi

echo "üöÄ Kh·ªüi ƒë·ªông m√¥i tr∆∞·ªùng development..."

# Copy environment file
cp .env.dev .env

# T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
echo "üìÅ T·∫°o th∆∞ m·ª•c data..."
mkdir -p data/models data/chroma_db

# Ki·ªÉm tra model file
MODEL_FILE="data/models/Arcee-VyLinh-Q4_K_M.gguf"
if [ ! -f "$MODEL_FILE" ]; then
    echo "‚ö†Ô∏è  C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y model file!"
    echo "üì• Vui l√≤ng download model t·ª´:"
    echo "   https://huggingface.co/Viet-Mistral/Arcee-VyLinh-Q4_K_M-gguf"
    echo "   v√† ƒë·∫∑t v√†o: $MODEL_FILE"
    echo ""
    read -p "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Ki·ªÉm tra backend network
echo "üîó Ki·ªÉm tra k·∫øt n·ªëi v·ªõi Backend service..."
if ! docker network ls | grep -q "$BACKEND_NETWORK"; then
    echo "‚ö†Ô∏è  Network '$BACKEND_NETWORK' kh√¥ng t·ªìn t·∫°i!"
    echo "   Vui l√≤ng ch·∫°y Backend service tr∆∞·ªõc."
    echo "   cd ../backend && ./run-dev.sh"
    exit 1
fi

# Ki·ªÉm tra backend database
if ! docker ps | grep -q "fastapi_mysql_db"; then
    echo "‚ö†Ô∏è  Backend MySQL database kh√¥ng ch·∫°y!"
    echo "   Vui l√≤ng ch·∫°y Backend service tr∆∞·ªõc."
    exit 1
fi

# Build v√† start services
echo "üèóÔ∏è  Building AI Service..."
docker-compose $COMPOSE_FILES build

echo "üöÄ Starting AI Service..."
docker-compose $COMPOSE_FILES up -d

# ƒê·ª£i service kh·ªüi ƒë·ªông
echo "‚è≥ ƒê·ª£i AI Service kh·ªüi ƒë·ªông..."
sleep 5

# Ki·ªÉm tra health
MAX_RETRIES=30
RETRY_COUNT=0

while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
    if curl -s http://localhost:8001/health > /dev/null 2>&1; then
        echo "‚úÖ AI Service ƒë√£ s·∫µn s√†ng!"
        break
    fi
    
    echo -n "."
    sleep 2
    RETRY_COUNT=$((RETRY_COUNT + 1))
done

if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
    echo ""
    echo "‚ùå AI Service kh√¥ng th·ªÉ kh·ªüi ƒë·ªông. Ki·ªÉm tra logs:"
    docker-compose $COMPOSE_FILES logs ai-service
    exit 1
fi

# Hi·ªÉn th·ªã th√¥ng tin
echo ""
echo "‚ú® AI Service Development Environment Ready!"
echo "============================================"
echo "üìç API URL:        http://localhost:8001"
echo "üìö API Docs:       http://localhost:8001/docs"
echo "üìä ReDoc:          http://localhost:8001/redoc"
echo "üîç Health Check:   http://localhost:8001/health"
echo ""
echo "üìù Useful commands:"
echo "   - View logs:    docker-compose $COMPOSE_FILES logs -f ai-service"
echo "   - Stop:         docker-compose $COMPOSE_FILES down"
echo "   - Restart:      docker-compose $COMPOSE_FILES restart ai-service"
echo "   - Shell:        docker-compose $COMPOSE_FILES exec ai-service bash"
echo ""
echo "üî• Hot reload ƒë√£ ƒë∆∞·ª£c b·∫≠t - code changes s·∫Ω t·ª± ƒë·ªông reload!"

# Theo d√µi logs
echo ""
read -p "B·∫°n c√≥ mu·ªën xem logs kh√¥ng? (Y/n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Nn]$ ]]; then
    docker-compose $COMPOSE_FILES logs -f ai-service
fi