from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from typing import Optional

from dependencies.deps import get_db, get_current_user
from models.user import User
from schemas.notification import (
    NotificationCreate,
    NotificationUpdate,
    NotificationResponse,
    NotificationListResponse,
    NotificationRespondStatusUpdate,
    NotificationGeneralStatusUpdate,
    NotificationStatsResponse
)
from services.notification_service import (
    service_create_notification,
    service_get_user_notifications,
    service_get_user_notification,
    service_update_user_notification,
    service_delete_user_notification,
    service_update_respond_status_by_message,
    service_update_general_status_by_message,
    service_get_notification_stats,
    service_get_notifications_by_type_and_status
)
from models.notification import (
    NotificationType,
    NotificationEventStatus,
    NotificationRespondStatus,
    NotificationGeneralStatus
)

router = APIRouter()


@router.post("/", response_model=NotificationResponse, summary="T·∫°o th√¥ng b√°o m·ªõi")
def create_notification_endpoint(
    notification: NotificationCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    T·∫°o th√¥ng b√°o m·ªõi v·ªõi c√°c lo·∫°i:

    1. RESPOND: Th√¥ng b√°o c·∫ßn ph·∫£n h·ªìi
       - event_id: null (b·∫Øt bu·ªôc)
       - scheduled_at: null (b·∫Øt bu·ªôc)
       - Tr·∫°ng th√°i t·ª± ƒë·ªông: event_status=unread, respond_status=pending_response

    2. EVENT: Th√¥ng b√°o s·ª± ki·ªán
       - event_id: ID c·ªßa s·ª± ki·ªán (b·∫Øt bu·ªôc)
       - scheduled_at: null (b·∫Øt bu·ªôc)
       - Tr·∫°ng th√°i t·ª± ƒë·ªông: event_status=unread


    3. GENERAL: Th√¥ng b√°o chung c√≥ l·∫≠p l·ªãch
       - event_id: null (b·∫Øt bu·ªôc)
       - scheduled_at: th·ªùi gian t∆∞∆°ng lai (b·∫Øt bu·ªôc)
       - Tr·∫°ng th√°i t·ª± ƒë·ªông: event_status=unread, general_status=pending

    **L∆∞u √Ω:**
    - T·∫•t c·∫£ th√¥ng b√°o khi t·∫°o m·ªõi ƒë·ªÅu c√≥ event_status="unread"
    - user_id trong request s·∫Ω b·ªã B·ªé QUA, lu√¥n s·ª≠ d·ª•ng ID c·ªßa user ƒëang ƒëƒÉng nh·∫≠p

    üîí B·∫¢O M·∫¨T: Ch·ªâ c√≥ th·ªÉ t·∫°o notification cho ch√≠nh m√¨nh

    Example:
    ```json
    {
      "notification_type": "respond",
      "title": "Th√¥ng b√°o c·∫ßn ph·∫£n h·ªìi",
      "message": "Vui l√≤ng x√°c nh·∫≠n tham gia",
      "user_id": 999,  // B·ªä B·ªé QUA - s·∫Ω d√πng current_user.id
      "event_id": null,
      "scheduled_at": null
    }
    ```
    """
    # üîí B·∫¢O M·∫¨T: Ghi ƒë√® user_id b·∫±ng current_user.id
    notification.user_id = current_user.id
    return service_create_notification(db, notification)


@router.post("/external", response_model=NotificationResponse, summary="T·∫°o th√¥ng b√°o t·ª´ external service (Discord bot)")
def create_external_notification_endpoint(
    notification: NotificationCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    T·∫°o th√¥ng b√°o t·ª´ external service (Discord bot, N8N, etc.)

    ‚ö†Ô∏è ENDPOINT ƒê·∫∂C BI·ªÜT: Cho ph√©p t·∫°o notification cho user kh√°c
    Ch·ªâ d√†nh cho c√°c service ƒë√£ ƒë∆∞·ª£c authenticate v·ªõi JWT token h·ª£p l·ªá

    üîí B·∫¢O M·∫¨T: V·∫´n c·∫ßn JWT token h·ª£p l·ªá, nh∆∞ng cho ph√©p ch·ªâ ƒë·ªãnh user_id

    Example:
    ```json
    {
      "notification_type": "respond",
      "title": "Th√¥ng b√°o t·ª´ Discord",
      "message": "B·∫°n c√≥ tin nh·∫Øn m·ªõi t·ª´ Discord",
      "user_id": 2,  // ƒê∆∞·ª£c ph√©p ch·ªâ ƒë·ªãnh user_id kh√°c
      "event_id": null,
      "scheduled_at": null
    }
    ```
    """
    # Kh√¥ng ghi ƒë√® user_id, s·ª≠ d·ª•ng user_id t·ª´ request
    return service_create_notification(db, notification)


@router.get("/", response_model=NotificationListResponse, summary="L·∫•y th√¥ng b√°o c·ªßa user hi·ªán t·∫°i")
def get_user_notifications_endpoint(
    skip: int = Query(0, ge=0, description="S·ªë l∆∞·ª£ng b·ªè qua"),
    limit: int = Query(100, ge=1, le=1000, description="S·ªë l∆∞·ª£ng t·ªëi ƒëa"),
    notification_type: Optional[NotificationType] = Query(None, description="L·ªçc theo lo·∫°i th√¥ng b√°o (respond/event/general)"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    L·∫•y danh s√°ch th√¥ng b√°o c·ªßa user hi·ªán t·∫°i v·ªõi c√°c b·ªô l·ªçc:
    - notification_type: L·ªçc theo lo·∫°i th√¥ng b√°o
      - "respond": Th√¥ng b√°o c·∫ßn ph·∫£n h·ªìi
      - "event": Th√¥ng b√°o s·ª± ki·ªán
      - "general": Th√¥ng b√°o chung c√≥ l·∫≠p l·ªãch

    üîí B·∫¢O M·∫¨T: Ch·ªâ l·∫•y th√¥ng b√°o c·ªßa user ƒëang ƒëƒÉng nh·∫≠p
    """
    return service_get_user_notifications(
        db, current_user.id, skip, limit, notification_type
    )


@router.get("/filter-by-status", response_model=NotificationListResponse, summary="L·ªçc th√¥ng b√°o theo lo·∫°i v√† tr·∫°ng th√°i")
def get_notifications_by_type_and_status_endpoint(
    notification_type: NotificationType = Query(..., description="Lo·∫°i th√¥ng b√°o (event/respond/general)"),
    status: Optional[str] = Query(None, description="Tr·∫°ng th√°i t∆∞∆°ng ·ª©ng v·ªõi lo·∫°i th√¥ng b√°o"),
    skip: int = Query(0, ge=0, description="S·ªë l∆∞·ª£ng b·ªè qua"),
    limit: int = Query(100, ge=1, le=1000, description="S·ªë l∆∞·ª£ng t·ªëi ƒëa"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    L·ªçc th√¥ng b√°o theo lo·∫°i v√† tr·∫°ng th√°i t∆∞∆°ng ·ª©ng:
    
    **EVENT type (status):**
    - "unread" (ch∆∞a ƒë·ªçc)
    - "read" (ƒë√£ ƒë·ªçc)
    
    **RESPOND type (status):**
    - "pending_response" (ch∆∞a ph·∫£n h·ªìi)
    - "responded" (ƒë√£ ph·∫£n h·ªìi)
    
    **GENERAL type (status):**
    - "pending" (ch∆∞a g·ª≠i)
    - "sent" (ƒë√£ g·ª≠i)
    
    **V√≠ d·ª•:**
    - `/filter-by-status?notification_type=event&status=unread`
    - `/filter-by-status?notification_type=respond&status=pending_response&user_id=1`
    - `/filter-by-status?notification_type=general&status=sent`
    - `/filter-by-status?notification_type=event` (l·∫•y t·∫•t c·∫£ EVENT, kh√¥ng l·ªçc status)
    """
    # Chuy·ªÉn ƒë·ªïi status string th√†nh enum t∆∞∆°ng ·ª©ng
    event_status = None
    respond_status = None
    general_status = None
    
    if status:
        if notification_type == NotificationType.EVENT:
            try:
                event_status = NotificationEventStatus(status)
            except ValueError:
                raise HTTPException(
                    status_code=400,
                    detail=f"Invalid event_status: {status}. Valid values: unread, read"
                )
        elif notification_type == NotificationType.RESPOND:
            try:
                respond_status = NotificationRespondStatus(status)
            except ValueError:
                raise HTTPException(
                    status_code=400,
                    detail=f"Invalid respond_status: {status}. Valid values: pending_response, responded"
                )
        elif notification_type == NotificationType.GENERAL:
            try:
                general_status = NotificationGeneralStatus(status)
            except ValueError:
                raise HTTPException(
                    status_code=400,
                    detail=f"Invalid general_status: {status}. Valid values: pending, sent"
                )
    
    return service_get_notifications_by_type_and_status(
        db=db,
        notification_type=notification_type,
        event_status=event_status,
        respond_status=respond_status,
        general_status=general_status,
        user_id=current_user.id,  # üîí B·∫¢O M·∫¨T: Lu√¥n l·ªçc theo current_user
        skip=skip,
        limit=limit
    )


@router.get("/filter-all-status", response_model=NotificationListResponse, summary="L·ªçc th√¥ng b√°o c·ªßa user hi·ªán t·∫°i theo t·∫•t c·∫£ tr·∫°ng th√°i")
def get_user_notifications_with_status_filter_endpoint(
    event_status: Optional[NotificationEventStatus] = Query(None, description="Tr·∫°ng th√°i EVENT (unread/read)"),
    respond_status: Optional[NotificationRespondStatus] = Query(None, description="Tr·∫°ng th√°i RESPOND (pending_response/responded)"),
    general_status: Optional[NotificationGeneralStatus] = Query(None, description="Tr·∫°ng th√°i GENERAL (pending/sent)"),
    skip: int = Query(0, ge=0, description="S·ªë l∆∞·ª£ng b·ªè qua"),
    limit: int = Query(100, ge=1, le=1000, description="S·ªë l∆∞·ª£ng t·ªëi ƒëa"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    L·ªçc th√¥ng b√°o c·ªßa user hi·ªán t·∫°i theo t·∫•t c·∫£ c√°c tr·∫°ng th√°i c√≥ th·ªÉ:

    **C√≥ th·ªÉ k·∫øt h·ª£p c√°c filter:**
    - event_status: "unread" ho·∫∑c "read" (cho lo·∫°i EVENT)
    - respond_status: "pending_response" ho·∫∑c "responded" (cho lo·∫°i RESPOND)
    - general_status: "pending" ho·∫∑c "sent" (cho lo·∫°i GENERAL)

    **V√≠ d·ª•:**
    - `/filter-all-status?event_status=unread&respond_status=pending_response`
    - `/filter-all-status?general_status=sent`
    - `/filter-all-status?event_status=read&respond_status=responded&general_status=pending`
    - `/filter-all-status` (l·∫•y t·∫•t c·∫£ c·ªßa user hi·ªán t·∫°i)

    üîí B·∫¢O M·∫¨T: Ch·ªâ l·∫•y th√¥ng b√°o c·ªßa user ƒëang ƒëƒÉng nh·∫≠p
    """
    return service_get_notifications_by_type_and_status(
        db=db,
        notification_type=None,  # Kh√¥ng l·ªçc theo type, l·∫•y t·∫•t c·∫£
        event_status=event_status,
        respond_status=respond_status,
        general_status=general_status,
        user_id=current_user.id,  # üîí B·∫¢O M·∫¨T: Lu√¥n l·ªçc theo current_user
        skip=skip,
        limit=limit
    )


@router.get("/{notification_id}", response_model=NotificationResponse, summary="L·∫•y th√¥ng b√°o theo ID")
def get_notification_endpoint(
    notification_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt th√¥ng b√°o (ch·ªâ c·ªßa user hi·ªán t·∫°i)"""
    return service_get_user_notification(db, notification_id, current_user.id)


@router.put("/{notification_id}", response_model=NotificationResponse, summary="C·∫≠p nh·∫≠t th√¥ng b√°o")
def update_notification_endpoint(
    notification_id: int,
    notification_update: NotificationUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """C·∫≠p nh·∫≠t th√¥ng tin th√¥ng b√°o (ch·ªâ c·ªßa user hi·ªán t·∫°i)"""
    return service_update_user_notification(db, notification_id, notification_update, current_user.id)


@router.delete("/{notification_id}", summary="X√≥a th√¥ng b√°o")
def delete_notification_endpoint(
    notification_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """X√≥a m·ªôt th√¥ng b√°o (ch·ªâ c·ªßa user hi·ªán t·∫°i)"""
    return service_delete_user_notification(db, notification_id, current_user.id)


@router.patch("/respond-status", summary="C·∫≠p nh·∫≠t tr·∫°ng th√°i RESPOND theo message")
def update_respond_status_by_message_endpoint(
    status_update: NotificationRespondStatusUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    C·∫≠p nh·∫≠t tr·∫°ng th√°i ph·∫£n h·ªìi cho t·∫•t c·∫£ th√¥ng b√°o RESPOND c√≥ c√πng message
    D√†nh ri√™ng cho lo·∫°i RESPOND
    """
    return service_update_respond_status_by_message(
        db, status_update.message, status_update.respond_status
    )


@router.patch("/general-status", summary="C·∫≠p nh·∫≠t tr·∫°ng th√°i GENERAL theo message")
def update_general_status_by_message_endpoint(
    status_update: NotificationGeneralStatusUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    C·∫≠p nh·∫≠t tr·∫°ng th√°i cho t·∫•t c·∫£ th√¥ng b√°o GENERAL c√≥ c√πng message
    D√†nh ri√™ng cho lo·∫°i GENERAL
    """
    return service_update_general_status_by_message(
        db, status_update.message, status_update.general_status
    )


@router.get("/stats", response_model=NotificationStatsResponse, summary="Th·ªëng k√™ th√¥ng b√°o c·ªßa user hi·ªán t·∫°i")
def get_notification_stats_endpoint(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """L·∫•y th·ªëng k√™ th√¥ng b√°o c·ªßa user hi·ªán t·∫°i

    üîí B·∫¢O M·∫¨T: Ch·ªâ l·∫•y th·ªëng k√™ c·ªßa user ƒëang ƒëƒÉng nh·∫≠p
    """
    return service_get_notification_stats(db, current_user.id)
