import os
import discord
from discord.ext import commands
from dotenv import load_dotenv
import asyncio
import aiohttp
import json
from fastapi import FastAPI, Request
import uvicorn

load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
N8N_WEBHOOK_URL = os.getenv("N8N_WEBHOOK_URL")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")

app = FastAPI()

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents, help_command=None)

async def send_reminder(event, user_id=None, channel_id=None):
    # Format message
    title = event.get('title') if isinstance(event, dict) else getattr(event, 'title', getattr(event, 'name', ''))
    start_time = event.get('start_time') if isinstance(event, dict) else getattr(event, 'start_time', '')
    description = event.get('description') if isinstance(event, dict) else getattr(event, 'description', None)
    msg = f"üìÖ **Nh·∫Øc nh·ªü s·ª± ki·ªán:** {title}\nüïí Th·ªùi gian: {start_time}\n"
    if description:
        msg += f"üìù M√¥ t·∫£: {description}\n"
    # G·ª≠i DM n·∫øu c√≥ user_id
    if user_id:
        try:
            user = await bot.fetch_user(int(user_id))
            if user:
                await user.send(msg)
        except Exception:
            pass
    # G·ª≠i v√†o channel n·∫øu c√≥ channel_id
    elif channel_id:
        try:
            channel = await bot.fetch_channel(int(channel_id))
            if channel:
                await channel.send(msg)
        except Exception:
            pass

@app.post("/send_reminder")
async def api_send_reminder(request: Request):
    data = await request.json()
    
    # H√†m helper ƒë·ªÉ l·∫•y user info t·ª´ backend
    async def get_user_info(owner_id):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{BACKEND_URL}/discord/users/{owner_id}",
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status == 200:
                        user_data = await response.json()
                        return {
                            "discord_user_id": user_data.get("discord_user_id"),
                            "name": user_data.get("name"),
                            "email": user_data.get("email")
                        }
        except Exception:
            pass
        return None
    
    async def process_event(event):
        user_id = event.get('user_id') or event.get('discord_id')
        channel_id = event.get('channel_id')
        owner_id = event.get('owner_id')
        
        await send_reminder(event, user_id=user_id, channel_id=channel_id)
        user_info = await get_user_info(owner_id) if owner_id else None
        
        return {
            "success": True,
            "description": event.get('description'),
            "start_time": event.get('start_time') or event.get('Start'),
            "end_time": event.get('end_time') or event.get('End'),
            "discord_user_id": user_info.get("discord_user_id") if user_info else None,
            "owner_id": owner_id
        }
    
    # X·ª≠ l√Ω list ho·∫∑c single event
    if isinstance(data, list):
        results = [await process_event(event) for event in data]
        return {"results": results, "count": len(data)}
    
    return await process_event(data)

@bot.event
async def on_ready():
    pass

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    if message.content.startswith('!'):
        await bot.process_commands(message)
        return
    question = message.content.strip()
    request_data = {
        "question": question,
        "student_info": {
            "name": message.author.display_name or message.author.name,
            "student_id": str(message.author.id),
            "class": message.channel.name,
            "discord_id": str(message.author.id)
        },
        "channel_info": {
            "channel_id": str(message.channel.id),
            "guild_id": str(message.guild.id) if message.guild else "DM"
        }
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                N8N_WEBHOOK_URL,
                json=request_data,
                headers={"Content-Type": "application/json"},
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                if response.status == 200:
                    try:
                        result = await response.json()
                        # N·∫øu k·∫øt qu·∫£ l√† template preview
                        if isinstance(result, dict) and result.get('success'):
                            response_data = result.get('response', 'Kh√¥ng c√≥ ph·∫£n h·ªìi')
                            # N·∫øu response_data l√† list v√† c√≥ tr∆∞·ªùng template_id, rendered_content
                            if isinstance(response_data, list) and response_data and 'template_id' in response_data[0]:
                                preview = response_data[0]
                                msg = f"**Template ID:** {preview['template_id']}\n**N·ªôi dung:** {preview['rendered_content']}"
                                # N·∫øu l√† DM th√¨ g·ª≠i v·ªÅ DM, n·∫øu l√† channel th√¨ g·ª≠i v·ªÅ channel
                                if isinstance(message.channel, discord.DMChannel):
                                    await message.author.send(msg)
                                else:
                                    await message.channel.send(msg)
                            else:
                                # M·∫∑c ƒë·ªãnh g·ª≠i v·ªÅ channel ho·∫∑c reply
                                await message.reply(str(response_data))
                    except json.JSONDecodeError:
                        pass
                else:
                    pass
    except asyncio.TimeoutError:
        pass
    except Exception:
        pass

@bot.command(name='hello')
async def hello_command(ctx):
    """Ch√†o bot"""
    await ctx.reply(f"Xin ch√†o {ctx.author.display_name}! üëã")

@bot.command(name='ping')
async def ping_command(ctx):
    """Ki·ªÉm tra ph·∫£n h·ªìi"""
    latency = round(bot.latency * 1000)
    await ctx.reply(f"üèì Pong! ƒê·ªô tr·ªÖ: {latency}ms")

@bot.command(name='help')
async def help_command(ctx):
    """Xem menu tr·ª£ gi√∫p"""
    help_text = """**ü§ñ Tr·ª£ l√Ω gi·∫£ng vi√™n - L·ªánh h·ªó tr·ª£:**

    **üìã L·ªánh c√≥ s·∫µn:**
    !hello ‚Äî ch√†o bot  
    !ping ‚Äî ki·ªÉm tra ph·∫£n h·ªìi  
    !help ‚Äî xem menu tr·ª£ gi√∫p
    !kick ‚Äî kick th√†nh vi√™n
    !ban ‚Äî ban th√†nh vi√™n
    !roll ‚Äî quay x√∫c x·∫Øc (v√≠ d·ª•: !roll 2d6)

    **üéØ AI Assistant:**
    G·ª≠i b·∫•t k·ª≥ tin nh·∫Øn n√†o ƒë·ªÉ AI tr·∫£ l·ªùi
    VD: "Khi n√†o deadline b√†i t·∫≠p?"
    """
    await ctx.send(help_text)

# Load c√°c ph·∫ßn m·ªü r·ªông n·∫øu c√≥
initial_extensions = [
    "cogs.moderation",
    "cogs.fun",
    "cogs.utility"
]

async def main():
    for ext in initial_extensions:
        try:
            await bot.load_extension(ext)
        except Exception:
            pass
    try:
        await bot.start(TOKEN)
    except discord.LoginFailure:
        pass
    except Exception:
        pass

if __name__ == "__main__":
    import threading

    def run_discord():
        asyncio.run(main())

    def run_fastapi():
        uvicorn.run("bot:app", host="0.0.0.0", port=8080)

    t1 = threading.Thread(target=run_discord)
    t2 = threading.Thread(target=run_fastapi)
    t1.start()
    t2.start()
    t1.join()
    t2.join()