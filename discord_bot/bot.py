import os
import discord
from discord.ext import commands
from dotenv import load_dotenv
import asyncio
import aiohttp
import json
# Th√™m FastAPI
from fastapi import FastAPI
import uvicorn

load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
N8N_WEBHOOK_URL = os.getenv("N8N_WEBHOOK_URL")

# Kh·ªüi t·∫°o FastAPI
app = FastAPI()

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents, help_command=None)

@bot.event
async def on_ready():
    pass

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    # X·ª≠ l√Ω commands tr∆∞·ªõc
    if message.content.startswith('!'):
        await bot.process_commands(message)
        return
    
    question = message.content.strip()
    request_data = {
        "question": question,
        "student_info": {
            "name": message.author.display_name or message.author.name,
            "student_id": str(message.author.id),
            "class": message.channel.name,
            "discord_id": str(message.author.id)
        },
        "channel_info": {
            "channel_id": str(message.channel.id),
            "guild_id": str(message.guild.id) if message.guild else "DM"
        }
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                N8N_WEBHOOK_URL,
                json=request_data,
                headers={"Content-Type": "application/json"},
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                if response.status == 200:
                    try:
                        result = await response.json()
                        # N·∫øu k·∫øt qu·∫£ l√† template preview
                        if isinstance(result, dict) and result.get('success'):
                            response_data = result.get('response', 'Kh√¥ng c√≥ ph·∫£n h·ªìi')
                            # N·∫øu response_data l√† list v√† c√≥ tr∆∞·ªùng template_id, rendered_content
                            if isinstance(response_data, list) and response_data and 'template_id' in response_data[0]:
                                preview = response_data[0]
                                msg = f"**Template ID:** {preview['template_id']}\n**N·ªôi dung:** {preview['rendered_content']}"
                                # N·∫øu l√† DM th√¨ g·ª≠i v·ªÅ DM, n·∫øu l√† channel th√¨ g·ª≠i v·ªÅ channel
                                if isinstance(message.channel, discord.DMChannel):
                                    await message.author.send(msg)
                                else:
                                    await message.channel.send(msg)
                            else:
                                # M·∫∑c ƒë·ªãnh g·ª≠i v·ªÅ channel ho·∫∑c reply
                                await message.reply(str(response_data))
                    except json.JSONDecodeError:
                        pass
                else:
                    pass
    except asyncio.TimeoutError:
        pass
    except Exception:
        pass
    
@bot.command(name='hello')
async def hello_command(ctx):
    """Ch√†o bot"""
    await ctx.reply(f"Xin ch√†o {ctx.author.display_name}! üëã")

@bot.command(name='ping')
async def ping_command(ctx):
    """Ki·ªÉm tra ph·∫£n h·ªìi"""
    latency = round(bot.latency * 1000)
    await ctx.reply(f"üèì Pong! ƒê·ªô tr·ªÖ: {latency}ms")

@bot.command(name='help')
async def help_command(ctx):
    """Xem menu tr·ª£ gi√∫p"""
    help_text = """**ü§ñ Tr·ª£ l√Ω gi·∫£ng vi√™n - L·ªánh h·ªó tr·ª£:**

    **üìã L·ªánh c√≥ s·∫µn:**
    `!hello` ‚Äî ch√†o bot  
    `!ping` ‚Äî ki·ªÉm tra ph·∫£n h·ªìi  
    `!help` ‚Äî xem menu tr·ª£ gi√∫p
    `!kick` ‚Äî kick th√†nh vi√™n
    `!ban` ‚Äî ban th√†nh vi√™n
    `!roll` ‚Äî quay x√∫c x·∫Øc (v√≠ d·ª•: !roll 2d6)

    **üéØ AI Assistant:**
    G·ª≠i b·∫•t k·ª≥ tin nh·∫Øn n√†o ƒë·ªÉ AI tr·∫£ l·ªùi
    VD: "Khi n√†o deadline b√†i t·∫≠p?"
    """
    await ctx.send(help_text)

# Load c√°c ph·∫ßn m·ªü r·ªông n·∫øu c√≥
initial_extensions = [
    "cogs.moderation",
    "cogs.fun",
    "cogs.utility"
]

async def main():
    for ext in initial_extensions:
        try:
            await bot.load_extension(ext)
        except Exception:
            pass

    try:
        await bot.start(TOKEN)
    except discord.LoginFailure:
        pass
    except Exception:
        pass

if __name__ == "__main__":
    import threading

    def run_discord():
        asyncio.run(main())

    def run_fastapi():
        uvicorn.run("bot:app", host="0.0.0.0", port=8080)

    t1 = threading.Thread(target=run_discord)
    t2 = threading.Thread(target=run_fastapi)
    t1.start()
    t2.start()
    t1.join()
    t2.join()

